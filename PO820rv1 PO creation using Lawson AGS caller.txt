     H********************************************************************
     H*‚Program:  šPO820R - from eample AR765R using AGScaller
     H*‚Purpose:   automate Adding PO's generated by Source
     H*‚Author:    Sachin Zinjurde
     H*‚Date:      10/17/23
     H*‚This version will write a purchase order per vendor with multiple
     H*‚lines.
     H*                                                                     es
      ********************************************************************
     FPO820W    Uf   e           k disk

      * This include has all of the prototypes needed to call the methods
      * of the Java class: bcxtools.AGSCaller
      /include BLRPGSRC7,AGSCALLPR

      *Define the Java class locally.
     DAGSCaller        s               O   CLASS(*JAVA:'bcxtools.AGSCaller')

      *These data areas allow for soft-coding the classpath and AGS port
      *number.
     DAGSClassP        s            200    DTAARA
     DAGSPort          s              4    DTAARA
     DCmpnyHld         s                   Like(D820CMPNY)
     DByrcdHld         s                   Like(D820BYRCD )
     DPNMBRHld         s                   Like(D820PNMBR)
     DVendHold         s                   Like(D820VENDOR)
     DPRFRLChld        s                   Like(D820PRFRLC)
     DPoAdded          s              1a
     DLineAdd          s              1a
     DOrderQty         s              9s 0
     DUnitCost         s             12s 4

     DCleanUpDollars   PR            25
     D InString                      25    VALUE
     D SignLocation                   1    VALUE

     DConvertToNum     PR            25  2
     D InStringNum                   25    VALUE

     DParseDouble      pr             8F   EXTPROC(*JAVA:
     D                                       'java.lang.Double':
     D                                       'parseDouble')
     D                                     STATIC
     D                                 O   CLASS(*JAVA:
     D                                       'java.lang.String')
     D                                     CONST

     DnewString        pr              O   EXTPROC(*JAVA:
     D                                       'java.lang.String':
     D                                       *CONSTRUCTOR)
     D                                     CLASS(*JAVA:
     D                                       'java.lang.String')
     D                               25A   CONST

      *Data structure to hold the AGS call results.
     DResult           ds
     D RsMessageID                    3A
     D RsDash                         1A
     D RsMessage                    996A

     DLINE_MAX         c                   CONST(1)

      *Entry Parm: Batch Number is returned to the calling CL.
     C*    *ENTRY        Plist
     C*                  Parm                    DateIn            8
     C*                  Parm                    PONumber          6
     C*                  Parm                    FailureFlag       1
     C*                  Parm                    ErrorMsg        512

      *Retrieve the data area values.
     C                   In(E)     AGSClassP
     C                   In(E)     AGSPort

      *Change the classpath so JNI will know where to find the class.
     C                   call      'SETCLASSP'
     C                   parm                    AGSClassP

      /free

       //FailureFlag = 'N';

       //First, Instantiate the AGSCaller class.
       AGSCaller = new_AGSCaller();

       //Setup Java Class
       setPort(AGSCaller:AGSPort);
       clearParms(AGSCaller);
       setUserID(AGSCaller:'SIEBYIC');
       setPassword(AGSCaller:'xyz12345');

       setll *loval  po820w;
       clear PoAdded;
       clear LineAdd;

       //‚PO20.1-PO Header
       dow not %eof(PO820W);
       Read PO820W;

       if Not %eof(PO820W);

       if D820CMPNY <> CmpnyHld or D820BYRCD <> ByrcdHld or
          D820VENDOR <> VendHold or D820PRFRLC <> PRFRLChld;
          //-----------
           if POAdded = 'Y' and LineAdd <> 'E';
             exsr ReleasePO;
           endif;
          //-----------
           evalr D820VENDOR = %trim(D820VENDOR);
           CmpnyHld = D820CMPNY;
           ByrcdHld = D820BYRCD;
           VendHold = D820VENDOR;
           PRFRLChld = D820PRFRLC;
           clear PoAdded;
           clear LineAdd;
         //---
         Exsr AddPO;
         //-Response, update work file and process the next.
           If rsMessageID <> '000';
             PoAdded = 'N';
           endif;
           If rsMessageID = '000';
             PoAdded = 'Y';
             D820PNMBR = getOneFieldVal(AGSCaller:'PCR-PO-NUMBER');
             PNMBRHld  = getOneFieldVal(AGSCaller:'PCR-PO-NUMBER');
             exsr AddLine;
           endif;
         D820RESULT = Result;
         update WRK820FMT;
       else;
         if PoAdded = 'Y';
           Exsr AddLine ;
         endif;

           D820RESULT = Result;
           update WRK820FMT;
       endif;
       else;
          //--Release the last record---------
           if POAdded = 'Y' and LineAdd <> 'E';
             exsr ReleasePO;
           endif;
          //-----------
       endif;

       EndDo;

       *inlr = *on;
       //-------------------------------------------------------------------
       begsr AddPO;
        //---------
         clearParms(AGSCaller);
         OrderQty = D821QNTTY;
         UnitCost = D821ENTUNT;
         setToken(AGSCaller:'PO20.1');
         setFunction(AGSCaller:'A');
        //---------
         addParm(AGSCaller:'PCR-COMPANY':%CHAR(D820CMPNY));
         addParm(AGSCaller:'PCR-BUYER-CODE':D820BYRCD);
         addParm(AGSCaller:'PCR-PO-DATE':%CHAR(D820PODATE));
         addParm(AGSCaller:'PCR-VENDOR':D820VENDOR);
         addParm(AGSCaller:'PCR-PURCH-FR-LOC':D820PRFRLC);
         addParm(AGSCaller:'PCR-LOCATION':D820LCTN);
         addParm(AGSCaller:'PCR-DFLT-DL-DATE':%CHAR(D820DFDLDT));
         //-----------------------------------------------------
       Result = execute(AGSCaller);
       endsr;
       //---------------------------------------------------------------
       begsr AddLine ;
         OrderQty = D821QNTTY;
         UnitCost = D821ENTUNT;
         D820PNMBR = PNMBRHld;
        //--------- Use field numbers instead of field names
         setToken(AGSCaller:'PO20.1');
         setFunction(AGSCaller:'C');
         addParm(AGSCaller:'_EVT':'CHG');
         addParm(AGSCaller:'_RTN':'DATA');
         addParm(AGSCaller:'_f4':%CHAR(D820CMPNY));
         addParm(AGSCaller:'_f5':D820BYRCD);
         addParm(AGSCaller:'_f7':PNMBRHld);
         addParm(AGSCaller:'_f8':%CHAR(D820PRLS));
        //---------
         addParm(AGSCaller:'_f121:1':'A');
         addParm(AGSCaller:'_f123:1':%trim(D821ITEM));
         addParm(AGSCaller:'_f124:1':%char(OrderQty));
         addParm(AGSCaller:'_f125:1':'EA');
         addParm(AGSCaller:'_f126:1':%char(UnitCost));
         addParm(AGSCaller:'_f127:1':%CHAR(D820DFDLDT));
         addParm(AGSCaller:'_f128:1':%trim(D820LCTN));
         addParm(AGSCaller:'_f132:1':D821ITMTYP);
         addParm(AGSCaller:'_f133:1':D821VRACUN);
         addParm(AGSCaller:'_f134:1':%char(D821VRACCN));
         addParm(AGSCaller:'_f135:1':%char(D821VRSBAC));
         addParm(AGSCaller:'_f136:1':%CHAR(D820CMPNY));

       Result = execute(AGSCaller);
         If rsMessageID <> '000';
             LineAdd = 'E';
           endif;
       endsr;
       //-------------------------------------------------------------------
       begsr ReleasePO;
        //---------
         clearParms(AGSCaller);
         setToken(AGSCaller:'PO20.1');
         setFunction(AGSCaller:'R');
         addParm(AGSCaller:'_EVT':'CHG');
         addParm(AGSCaller:'_RTN':'DATA');
         addParm(AGSCaller:'PCR-COMPANY':%CHAR(CmpnyHld));
         addParm(AGSCaller:'PCR-BUYER-CODE':ByrcdHld);
         addParm(AGSCaller:'PCR-PO-NUMBER':PNMBRHld);
         addParm(AGSCaller:'PCR-PO-RELEASE':'0');
       Result = execute(AGSCaller);
       endsr;
       //---------------------------------------------------------------
